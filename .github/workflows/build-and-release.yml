name: 构建与发布

on:
  # 当推送标签时自动触发
  push:
    tags:
      - 'v*' # 当推送以v开头的标签时触发，例如v1.0.0
  
  # 允许从GitHub界面手动触发
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: '0.0.0'
      prerelease:
        description: '是否为预发布版本'
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: 在 macOS ARM 环境中一次性构建所有平台
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: all
            asset_names: [
              "wechat-video-uploader-linux-x64",
              "wechat-video-uploader-windows-x64.exe",
              "wechat-video-uploader-macos-x64",
              "wechat-video-uploader-macos-arm64"
            ]

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'wechat-video-uploader/package-lock.json'

    - name: 安装依赖
      working-directory: wechat-video-uploader
      run: |
        npm install
        # 全局安装 pkg 命令
        npm install -g pkg
        # 确保依赖安装成功
        npm ls --depth=0 || true

    # 使用 npx 调用 pkg，不需要全局安装

    - name: 清理临时文件并准备构建环境
      working-directory: wechat-video-uploader
      shell: bash
      run: |
        # 清理临时文件
        rm -rf temp/cookies.json || true
        mkdir -p dist
        
        # 确保依赖已安装
        npm install --no-package-lock
        
        # 确保构建脚本可执行
        chmod +x build.sh

    - name: 修改构建脚本以支持所有平台
      working-directory: wechat-video-uploader
      shell: bash
      run: |
        cat > build.sh << 'EOF'
        #!/bin/bash
        
        # 确保 temp 目录存在
        mkdir -p temp
        
        # 清理 cookies 文件
        rm -rf temp/cookies*.json
        
        # 确保 dist 目录存在
        mkdir -p dist
        
        echo "=== 开始构建所有平台的可执行文件 ==="
        
        # 使用 pkg . --public 来打包所有平台
        echo "\n=== 使用 pkg . --public 打包所有平台 ==="
        pkg . --public
        
        # 设置执行权限
        chmod +x dist/wechat-video-uploader-linux
        chmod +x dist/wechat-video-uploader-macos
        chmod +x dist/wechat-video-uploader-macos-arm64
        
        echo "\n=== 构建完成，可执行文件位于 dist 目录 ==="
        ls -la dist/
        EOF
        
        chmod +x build.sh

    - name: 使用构建脚本构建所有平台
      working-directory: wechat-video-uploader
      shell: bash
      run: |
        ./build.sh

    - name: 查看构建产物
      working-directory: wechat-video-uploader/dist
      shell: bash
      run: |
        echo "=== 查看构建产物 ==="
        ls -la
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: all-platform-builds
        path: wechat-video-uploader/dist/
        if-no-files-found: error

  release:
    name: 创建发布
    needs: build
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 获取版本号
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # 从标签中提取版本号
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # 使用手动触发时提供的版本号
            VERSION="v${{ github.event.inputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "使用版本: $VERSION"
        
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: 查看下载的构建产物
        run: |
          echo "=== 查看下载的构建产物 ==="
          ls -la ./artifacts
          find ./artifacts -type f
          
      - name: 准备发布文件
        run: |
          mkdir -p ./release-files
          
          echo "=== 准备发布文件 ==="
          
          # 复制 Linux 构建产物
          if [ -f ./artifacts/all-platform-builds/wechat-video-uploader-linux-x64 ]; then
            cp ./artifacts/all-platform-builds/wechat-video-uploader-linux-x64 ./release-files/wechat-video-uploader-linux-x64
            echo "✅ 已复制 Linux x64 构建产物"
          else
            echo "❌ 未找到 Linux x64 构建产物"
          fi
          
          # 复制 Windows 构建产物
          if [ -f ./artifacts/all-platform-builds/wechat-video-uploader-win-x64.exe ]; then
            cp ./artifacts/all-platform-builds/wechat-video-uploader-win-x64.exe ./release-files/wechat-video-uploader-windows-x64.exe
            echo "✅ 已复制 Windows x64 构建产物"
          else
            echo "❌ 未找到 Windows x64 构建产物"
          fi
          
          # 复制 macOS x64 构建产物
          if [ -f ./artifacts/all-platform-builds/wechat-video-uploader-macos-x64 ]; then
            cp ./artifacts/all-platform-builds/wechat-video-uploader-macos-x64 ./release-files/wechat-video-uploader-macos-x64
            echo "✅ 已复制 macOS x64 构建产物"
          else
            echo "❌ 未找到 macOS x64 构建产物"
          fi
          
          # 复制 macOS ARM64 构建产物
          if [ -f ./artifacts/all-platform-builds/wechat-video-uploader-macos-arm64 ]; then
            cp ./artifacts/all-platform-builds/wechat-video-uploader-macos-arm64 ./release-files/wechat-video-uploader-macos-arm64
            echo "✅ 已复制 macOS ARM64 构建产物"
          else
            echo "❌ 未找到 macOS ARM64 构建产物"
          fi
          
          # 查看准备好的发布文件
          echo "=== 准备好的发布文件 ==="
          ls -la ./release-files
          
      - name: 如果手动触发则创建标签
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.get_version.outputs.VERSION }} -m "发布 ${{ steps.get_version.outputs.VERSION }}"
          git push origin ${{ steps.get_version.outputs.VERSION }}
      
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: 发布 ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: ./release-files/*
          body: |
            # 视频自动上传工具 ${{ steps.get_version.outputs.VERSION }}
            
            自动化视频上传工具，支持微信视频号、小红书、抖音、快手等平台。
            
            ## 下载
            
            - [Windows](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/wechat-video-uploader-windows-x64.exe)
            - [macOS (Intel/x64)](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/wechat-video-uploader-macos-x64)
            - [macOS (Apple Silicon/ARM64)](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/wechat-video-uploader-macos-arm64)
            - [Linux](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/wechat-video-uploader-linux-x64)
            
            ## 使用方法
            
            请参考 [README.md](https://github.com/${{ github.repository }}/blob/main/wechat-video-uploader/README.md) 了解详细使用方法。
